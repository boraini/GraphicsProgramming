#version 330 core

uniform mat4 projectionMatrix;
uniform mat4 cameraInverseMatrix;
uniform mat4 objectMatrix;
uniform mat4 boneMatrices[88];

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 uv;
layout (location = 3) in ivec4 bone;
layout (location = 4) in vec4 influence;

out vec2 TexCoord;
out vec3 worldNormal;
out vec3 weightColor;

vec3 weightRamp(float selectedWeight) {
if (selectedWeight > 0.75) {
        float t = 4.0 * (selectedWeight - 0.75);
        return (1.0 - t) * vec3(1.0, 1.0, 0.0) + t * vec3(1.0, 0.0, 0.0);
    }

    else if (selectedWeight > 0.50) {
        float t = 4.0 * (selectedWeight - 0.50);
        return (1.0 - t) * vec3(0.0, 1.0, 0.0) + t * vec3(1.0, 1.0, 0.0);
    }

    else if (selectedWeight > 0.25) {
        float t = 4.0 * (selectedWeight - 0.25);
        return (1.0 - t) * vec3(0.0, 1.0, 1.0) + t * vec3(0.0, 1.0, 0.0);
    }

    else {
        float t = 4.0 * selectedWeight;
       return (1.0 - t) * vec3(0.0, 0.0, 1.0) + t * vec3(0.0, 1.0, 1.0);
    }
    }

void main() {
    mat4 otherMatrix = projectionMatrix * cameraInverseMatrix * objectMatrix;

    vec4 v = vec4(position, 1.0);
    vec4 rv = vec4(0.0);
    vec3 rn = vec3(0.0);

    float selectedWeight = 0.0;
    for (int i = 0; i < 4; i++) {
        rv += boneMatrices[bone[i]] * influence[i] * v;
        rn += mat3(boneMatrices[bone[i]]) * influence[i] * normal;

        if (bone[i] == 2) selectedWeight += influence[i];
    }

    // rv = v;
    // rn = normal;

    gl_Position = otherMatrix * rv;
    worldNormal = mat3(otherMatrix) * rn;
    TexCoord = uv;
    weightColor = weightRamp(selectedWeight);
}
